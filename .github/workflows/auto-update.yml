name: Auto Update

on:
  workflow_call:
    inputs:
      au_version:
        description: 'Version of AutoUpdate to install (default: latest)'
        required: false
        type: string
        default: ''
      au_test_groups:
        description: 'Number of test groups to split packages into (default: 1)'
        required: false
        type: number
        default: 1
      au_push:
        description: 'Whether to push changes back to the repository (default: true)'
        required: false
        type: boolean
        default: true
      scheduled_build:
        description: 'Whether this is a scheduled build (default: false)'
        required: false
        type: boolean
        default: false
      forced_build:
        description: 'Whether this is a forced build (default: false)'
        required: false
        type: boolean
        default: false
      re_build:
        description: 'Whether this is a re-build (default: false)'
        required: false
        type: boolean
        default: false
      workflow_name:
        description: 'The name of the workflow triggering the build (default: empty)'
        required: false
        type: string
        default: ''
      commit_message:
        description: 'The commit message that triggered the workflow (default: empty)'
        required: false
        type: string
        default: ''
      user_repository:
        description: 'GitHub user/repository (default: current repository)'
        required: true
        type: string
      gist_id:
        description: 'Gist ID for storing package update information'
        required: true
        type: string
      gist_id_test:
        description: 'Gist ID for storing test package update information'
        required: true
        type: string
    secrets:
      personal_access_token:
        description: 'GitHub Personal Access Token with repo permissions'
        required: true
      chocolatey_api_key:
        description: 'Chocolatey API key for pushing packages'
        required: true

jobs:
  auto_update:
    runs-on: windows-latest

    steps:
    # Checkout Repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Initialize
    - name: Initialize
      run: |
        git config --global user.email "chocolatey@realdimensions.net"
        git config --global user.name "Chocolatey"
        git config --global core.safecrlf false

    # Install
    - name: Install
      env:
        AU_VERSION: ${{ inputs.au_version }}
        GH_SCHEDULED_BUILD: ${{ inputs.scheduled_build }}
        GH_FORCED_BUILD: ${{ inputs.forced_build }}
        GH_RE_BUILD: ${{ inputs.re_build }}
      shell: powershell
      run: |
        Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version
        $PSVersionTable
        git --version
        choco --version

        git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
        . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

        "Build info"
        '  {0,-20} {1}' -f 'SCHEDULED BUILD:', ($Env:GH_SCHEDULED_BUILD -eq 'true')
        '  {0,-20} {1}' -f 'FORCED BUILD:'   , ($Env:GH_FORCED_BUILD    -eq 'true')
        '  {0,-20} {1}' -f 'RE BUILD:'       , ($Env:GH_RE_BUILD        -eq 'true')

    # Build
    - name: Build
      env:
        GH_WORKFLOW_NAME: ${{ inputs.workflow_name }}
        GH_COMMIT_MESSAGE: ${{ inputs.commit_message }}
        
        AU_PUSH: ${{ inputs.au_push }}
        AU_TEST_GROUPS: ${{ inputs.au_test_groups }}

        GH_API_KEY: ${{ secrets.personal_access_token }}
        GH_USER_REPO: ${{ inputs.user_repository }}

        API_KEY: ${{ secrets.chocolatey_api_key }}

        GIST_ID: ${{ inputs.gist_id }}
        GIST_ID_TEST: ${{ inputs.gist_id_test }}
      shell: powershell
      run: |
        $ErrorActionPreference = 'Continue'

        if ($Env:GH_WORKFLOW_NAME -like '*test*') { ./test_all.ps1 "random $Env:au_test_groups"; return }

        if ( ($Env:GH_SCHEDULED_BUILD -ne 'true') -and ($Env:GH_FORCED_BUILD -ne 'true') ) {
            switch -regex ($Env:GH_COMMIT_MESSAGE)
            {
                '\[AU (.+?)\]'   { $forced = $Matches[1] }

                '\[PUSH (.+?)\]' {
                    $packages = $Matches[1] -split ' '
                    Write-Host "PUSHING PACKAGES: $packages"
                    foreach ($package in $packages) {
                        Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                        $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                        if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                        pushd $package_dir
                          if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                          choco pack; Push-Package;
                        popd
                    }
                    return
                }
            }
        }

        ./update_all.ps1 -ForcedPackages $forced
        7z a au_temp.zip $Env:TEMP\chocolatey\au\*

    # Upload Artifacts
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: au-artifacts
        path: |
          update_info.xml
          Update-AUPackages.md
          au_temp.zip
          Update-Force-Test-*.md