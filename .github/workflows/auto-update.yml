name: Auto Update

on:
  push:
    branches:
      - master
  schedule:
    - cron: '5 */8 * * *' # every 8 hours at 5 minutes past the hour
  workflow_dispatch:
    inputs:
      au_version:
        description: 'AU version to use (leave empty to use latest, or specify branch name to use development version from Github)'
        required: false
        default: ''
        type: string
      au_push:
        description: 'Set to true to push updated packages'
        required: false
        default: true
        type: boolean
      au_test_groups:
        description: 'Set to 1 to test all packages, or N to split testing into N groups'
        required: false
        default: 1
        type: number
      forcedPackages:
        description: 'Space-separated list of packages to force update (e.g. package1 package2)'
        required: false
        default: ''
        type: string

jobs:
  auto-update:
    runs-on: windows-latest
    steps:
    # Checkout Repository
    - uses: actions/checkout@v3
      name: Checkout Repository

    # Initialize
    - name: Initialize
      run: |
        git config --global user.email "chocolatey@realdimensions.net"
        git config --global user.name "Chocolatey"
        git config --global core.safecrlf false

    # Install
    - name: Install
      run: |
        Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version
        $PSVersionTable
        git --version
        choco --version

        git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
        . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

    # Build
    - name: Build
      env:
        GH_REPOSITORY_NAME: ${{ github.event.repository.name }}
        GH_SCHEDULED_BUILD: ${{ github.event_name == 'schedule' }}
        GH_FORCED_BUILD: ${{ github.event_name == 'workflow_dispatch' }}
        GH_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        $ErrorActionPreference = 'Continue'

        if ($Env:GH_REPOSITORY_NAME  -like '*test*') { ./test_all.ps1 "random $Env:au_test_groups"; return }

        if ( ($Env:GH_SCHEDULED_BUILD -ne 'true') -and ($Env:GH_FORCED_BUILD -ne 'true') ) {
            switch -regex ($Env:GH_COMMIT_MESSAGE)
            {
                '\[AU (.+?)\]'   { $forced = $Matches[1] }

                '\[PUSH (.+?)\]' {
                    $packages = $Matches[1] -split ' '
                    Write-Host "PUSHING PACKAGES: $packages"
                    foreach ($package in $packages) {
                        Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                        $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                        if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                        pushd $package_dir
                          if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                          choco pack; Push-Package;
                        popd
                    }
                    return
                }
            }
        }

        ./update_all.ps1 -ForcedPackages $forced
        7z a au_temp.zip $Env:TEMP\chocolatey\au\*